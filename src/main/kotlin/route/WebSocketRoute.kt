package org.example.route

import io.ktor.server.application.Application
import io.ktor.server.routing.routing
import io.ktor.server.websocket.DefaultWebSocketServerSession
import io.ktor.server.websocket.webSocket
import io.ktor.websocket.CloseReason
import io.ktor.websocket.Frame
import io.ktor.websocket.close
import io.ktor.websocket.readText
import io.ktor.websocket.send

val roomSessions = mutableMapOf<String, MutableSet<DefaultWebSocketServerSession>>()

fun Application.webSocketRoute() {
    routing {
        webSocket("/game") {
            val params = call.request.queryParameters
            val waitingRoomId = params["waitingRoomId"]
            val playerId = params["playerId"]

            if (waitingRoomId == null || playerId == null) {
                close(CloseReason(CloseReason.Codes.CANNOT_ACCEPT, "Missing parameters"))
                return@webSocket
            }

            println("üîå WebSocket Ïó∞Í≤∞Îê®: user=$playerId, room=$waitingRoomId")

            // ÏÑ∏ÏÖò Îì±Î°ù
            val sessions = roomSessions.getOrPut(waitingRoomId) { mutableSetOf() }
            sessions += this

            send("‚úÖ WebSocket Ïó∞Í≤∞ ÏôÑÎ£å: $playerId")

            try {
                for (frame in incoming) {
                    if (frame is Frame.Text) {
                        val msg = frame.readText()
                        println("üí¨ [$playerId] Î©îÏãúÏßÄ: $msg")

                        // Í∞ôÏùÄ Î∞©Ïùò Îã§Î•∏ ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
                        sessions.forEach { session ->
                            if (session != this) {
                                session.send("[$playerId]: $msg")
                            }
                        }
                    }
                }
            } catch (e: Exception) {
                println("‚ö†Ô∏è WebSocket ÏóêÎü¨: $e")
            } finally {
                println("üîå Ïó∞Í≤∞ Ï¢ÖÎ£åÎê®: $playerId")
                sessions -= this
            }
        }
    }
}